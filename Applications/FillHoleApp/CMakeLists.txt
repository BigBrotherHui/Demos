PROJECT(FillHoleApp)
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  message(STATUS "Set up ccache ...")
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif()
set(CMAKE_CXX_FLAGS_RELEASE "/MD")
find_package(Qt5 REQUIRED COMPONENTS Widgets Core)
find_package(CGAL COMPONENTS Qt5)
add_definitions(-DCGAL_USE_BASIC_VIEWER)
set(LIBIGL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/libigl/include)
set(BOOST_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/boost)
set(CGAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/cgal-5.5.2/include)
set(EIGEN_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/eigen)
set(GLAD_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/glad/include)
set(GLFW_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/glfw/include)
set(GMP_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/gmp/include)
set(MPFR_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/mpfr/include)

FILE(GLOB SRCFILES "*.cpp" "*.cxx")
FILE(GLOB HEADERS "*.h")
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CGAL_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${Eigen_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${GLAD_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${GLFW_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${GMP_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${MPFR_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${LIBIGL_INCLUDE_DIR})
ADD_DEFINITIONS(-DIGL_STATIC_LIBRARY)
FILE(GLOB LIBIGL_DLL "${CMAKE_SOURCE_DIR}/ThirdParty/libigl/bin/*.dll")
foreach(dll ${LIBIGL_DLL})
    file(COPY ${dll} DESTINATION ${CMAKE_BINARY_DIR}/bin/${CMAKE_GENERATOR_PLATFORM}/Release/)
endforeach()
add_executable(${PROJECT_NAME} ${SRCFILES} ${HEADERS})
# 设置筛选器
set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER "Applications")
#设置输出目录（属性-》常规-》输出目录）（不需要改动）
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/lib/${CMAKE_GENERATOR_PLATFORM}/$<CONFIGURATION>
    ARCHIVE_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/lib/${CMAKE_GENERATOR_PLATFORM}/$<CONFIGURATION>
    LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/lib/${CMAKE_GENERATOR_PLATFORM}/$<CONFIGURATION>
)
#设置后期生成事件
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND cmd /c "${CMAKE_BINARY_DIR}/postEvent.bat $(SolutionDir) $(SolutionName) $(ProjectDir) $(ProjectName) $(Platform) $(Configuration) $(TargetExt)"
)
else()
    # 其他系统的操作
    # ...
endif()
target_link_libraries(${PROJECT_NAME} PUBLIC Qt5::Widgets Qt5::Core CGAL::CGAL_Qt5)

